<Problem31>

In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:
1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
It is possible to make £2 in the following way:
1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?

Answer1: Recursive

coins =[2,5,10,20,50,100,200]

def numofways(goal,coins):
    if len(coins) == 0 : return 1
    largecoin = coins[-1]
    maxnumlargecoin = goal//largecoin
    return sum([numofways(goal-x*largecoin,coins[:-1]) for x in range(maxnumlargecoin + 1)])

print(numofways(200,coins))

Answer2: BruteForce

count=0
for a in range(200,-1,-200):
    for b in range(a,-1,-100):
        for c in range(b,-1, -50):
            for d in range(c,-1, -20):
                for e in range(d,-1, -10):
                    for f in range(e,-1, -5):
                        for g in range(f,-1, -2):
                            count += 1
print(count)

Answer3: Dynamic Programming

s = [1] + [0]*200
for coin in [1, 2, 5, 10, 20, 50, 100, 200]:
    for i in range(len(s) - coin):
        s[i+coin] += s[i]
print(s[-1])


<Problem32>

We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.
Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.

Answer:

print(sum({x*y for x in range(1,50) for y in range(100,2000) if ''.join(sorted(str(x)+str(y)+str(x*y))) == '123456789'}))


<Problem33>

The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 
49/98 = 4/8, which is correct, is obtained by cancelling the 9s.
We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.
If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

Answer:

from fractions import Fraction

result = Fraction(1,1)
for a in range(1,10):
    for b in range(1,10):
        for c in range(1,10):
            if Fraction(10*a +b, 10*b +c) == Fraction(a,c) != 1:
                result *= Fraction(a,c)

print(result.denominator)


<Problem34>

145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
Find the sum of all numbers which are equal to the sum of the factorial of their digits.
Note: As 1! = 1 and 2! = 2 are not sums they are not included.

Answer:

from math import factorial

fact={}
for i in range(0,10):
    fact[str(i)] = factorial(i)

for num in range(10, 1000000):
    if num == sum([fact[digit] for digit in str(num)]):
        print(num)


<Problem35>

The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?

Answer1:

limit = 1000000

primegrid=[0,0]+[1]*(limit-1)
for p in range(2,int(limit**0.5)+1):
    if primegrid[p] == 1:
        for notp in range(p*p, limit+1, p):
            primegrid[notp] = 0

def isodd(num):
    return all(list(map(lambda x: int(x)%2 , str(num))))

primelist = [p for p in range(limit+1) if primegrid[p] ==1 and isodd(p)]

def rotation(num):
    strnum = str(num)
    for i in range(0,len(strnum)):
        strnum = strnum[1:]+strnum[0]
        yield int(strnum)

count =1
for p in primelist:
    if all(map(lambda r: r in primelist,[rot for rot in rotation(p)])): count+=1
print(count)

Answer2: 

def combinations(A, n):
    if n == 1: return [[el] for el in A]
    C = []
    for arr in combinations(A, n-1):
        for el in A: newarr = arr[:]; newarr.append(el); C.append(newarr)
    return C

def isprime(n):
    for i in range(2, int(n**(1/2)) + 1):
        if n % i == 0: return False
    return True

P, cnt = [2, 3, 5, 7], 0
for i in range(2, 7):
    C = combinations([1, 3, 7, 9], i)
    for c in C: P.append(int(''.join([str(i) for i in c])))

for p in P:
    cir, s = True, str(p)
    for i in range(len(s)):
        if not isprime(int(s[i:]+s[:i])): cir = False; break
    if cir: cnt += 1
print(cnt)

<Problem36>

The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
(Please note that the palindromic number, in either base, may not include leading zeros.)

Answer:

def isparabolic(string):
    return True if string == string[::-1] else False

print(sum([i for i in range (1,1000000,2) if isparabolic(str(i)) and isparabolic(bin(i)[2:])]))


<Problem37>

The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right,
and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

Answer:

def isPrime(num): return all(num%d for d in range(3,int(num**0.5)+1,2))

prime, nextprime, winners =[2,3,5,7], [], []

while prime :
    for p in prime:
        for q in [1,3,7,9]:
            if isPrime(10*p+q) : nextprime.append(10*p+q)
    prime ,nextprime = nextprime, []
    for p in prime:
        if all([isPrime(int(str(p)[i:])) for i in range(1,len(str(p)))]) : winners.append(p)

print(sum([p for p in winners if p%10 !=1]))


<Problem38>

Take the number 192 and multiply it by each of 1, 2, and 3:
192 × 1 = 192
192 × 2 = 384
192 × 3 = 576
By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?

Answer:

for num in range(1,10000):
    string = ''
    n=1
    while len(string)<9:
        string = string + str(num*n)        
        if sorted(string) == list('123456789') : print(string)
        n+=1


<Problem39>

If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
{20,48,52}, {24,45,51}, {30,40,50}
For which value of p ≤ 1000, is the number of solutions maximised?

Answer:

sol = [0]*2000

def issquare(num):
    if num%int(num**0.5) == 0: return int(num**0.5)
    else : return 0

for a in range(1,500):
    for b in range(1,a+1):
        csquare=a*a+b*b
        if issquare(csquare):
            sol[issquare(csquare)+a+b] +=1 

print(sol.index(max(sol[1:1000])))


<Problem40>

An irrational decimal fraction is created by concatenating the positive integers:
0.123456789101112131415161718192021...
It can be seen that the 12th digit of the fractional part is 1.
If dn represents the nth digit of the fractional part, find the value of the following expression.
d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000

Answer:

string="*"
n=0
while len(string)<1000001:
    n+=1
    string += str(n)

target = [10**i for i in range(7)]
for k in target:
    print(string[k])