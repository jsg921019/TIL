<Problem 61>

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 		1, 4, 9, 16, 25, ...
Pentagonal	 P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, 
is represented by a different number in the set.

Answer:

def calc_numbers(start, end, proc):
    n = 1
    out = []
    while True:
        z = proc(n)
        if z >= start and z < end: out.append(z)
        if z >= end: return out
        n += 1

p3 = calc_numbers(1000, 10000, lambda n : n * (n + 1) / 2)
p4 = calc_numbers(1000, 10000, lambda n : n * n)
p5 = calc_numbers(1000, 10000, lambda n : n * (3 * n - 1) / 2)
p6 = calc_numbers(1000, 10000, lambda n : n * (2 * n - 1))
p7 = calc_numbers(1000, 10000, lambda n : n * (5 * n - 3) / 2)
p8 = calc_numbers(1000, 10000, lambda n : n * (3 * n - 2))


def find_loop(lists, start, end, found_numbers = []):
    if len(lists) == 1 and start * 100 + end in lists[0]:
        found_numbers += [start * 100 + end]
        print (found_numbers, sum(found_numbers))
    
    for cur_list in lists:
        for c in cur_list:
            if c // 100 == start:
                lists_copy = lists[0:]
                lists_copy.remove(cur_list)
                find_loop(lists_copy, c % 100, end, found_numbers + [c])

for n in p8:
    find_loop([p3, p4, p5, p6, p7], n % 100, n // 100)

Answer2:

def circle(polys, enddigits, chain):
    if len(chain) == 6 and (chain[0][0:2] == chain[5][2:4]):
        print("sum: " + str(sum(list(map(int,chain)))))
    for index, subelement in enumerate(polys):
        for value in subelement:
            if value[0:2] == enddigits:
                circle(polys[:index] + polys[index + 1:], value[2:4], chain + [value])

liste = [[str(n * (n + 1) // 2) for n in range(200) if 999 < n * (n + 1) / 2 < 10000],
         [str(n * n) for n in range(200) if 999 < n * n < 10000],
         [str(n * (3 * n - 1) // 2) for n in range(200) if 999 < n * (3 * n - 1) // 2 < 10000],
         [str(n * (2 * n - 1)) for n in range(200) if 999 < n * (2 * n - 1) < 10000],
         [str(n * (5 * n - 3) // 2) for n in range(200) if 999 < n * (5 * n - 3) / 2 < 10000],
         [str(n * (3 * n - 2)) for n in range(200) if 999 < n * (3 * n - 2) < 10000]]

for element in liste[0]:
    circle(liste[1:6],element[2:4], [element])


<Problem 62>

The cube, 41063625 (3453), can be permuted to produce two other cubes: 56623104 (3843) and 66430125 (4053). 
In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.
Find the smallest cube for which exactly five permutations of its digits are cube.

Answer1:

def cubegenerator():
    n,m=1,0
    while True:
        l =[]
        while 10**m <= n**3 < 10**(m+1):
            l.append(n**3)
            n+=1
        yield l
        m+=1

def PE062(num):
    for l in cubegenerator():
        a = list(map(lambda x: sorted(str(x)), l))
        for i in range(len(l)):
            if a.count(a[i]) >= num : return l[i]

Answer2: faster


def PE062n(k=5):
  n, n3, b = 1, 1, 10
  while 1:
    d=dict()
    while n3<b:
      v=''.join(sorted(str(n3)))
      if v in d:
        d[v].append(n)
      else:
        d[v]=[n]
      n+=1
      n3=n*n*n
    b*=10
    AA=[min(d[x]) for x in d if len(d[x])==k]
    if AA:
      return min(AA), min(AA)**3 # wants the cube or the root ?

print(PE062(20))


<Problem 63>

The 5-digit number, 16807=75, is also a fifth power. Similarly, the 9-digit number, 134217728=89, is a ninth power.
How many n-digit positive integers exist which are also an nth power?

Answer:

count= 0
for n in range(1,10):
    m=1
    while n**m >=10**(m-1):
        m+=1; count += 1
print(count)


<Problem 64>

All square roots are periodic when written as continued fractions and can be written in the form:
 sqrt(N) = a0+1/(a1 +1/(a2+1/...)))  
It can be seen that the sequence is repeating. For conciseness, we use the notation , to indicate that the block (1,3,1,8) repeats indefinitely.
How many continued fractions for  have an odd period?

Answer:

from math import sqrt

def lengthrepeat(n):
    if n == int(sqrt(n))*int(sqrt(n)): return 0

    p, q =1, int(sqrt(n))
    a = int(p/(sqrt(n)-q))
    l =[]

    while (p,q) not in l:
        l.append((p,q))
        p= (n-q**2)//p
        q= a*p -q
        a= int(p/(sqrt(n)-q))
    
    return len(l)

print(sum(lengthrepeat(n)%2 ==1 for n in range(2,10000)))


<Problem 65>

What is most surprising is that the important mathematical constant,
e = [2; 1, 2, 1, 1, 4, 1, 1, 6, 1, ... , 1, 2k, 1, ...].
The first ten terms in the sequence of convergents for e are:
2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457536, ...
The sum of digits in the numerator of the 10th convergent is 1 + 4 + 5 + 7 = 17 .
Find the sum of digits in the numerator of the 100th convergent of the continued fraction for e.
 
Answer1:

l=[2]+[m for x in [(1,2*n,1) for n in range(1,34)] for m in x]

def conv_inf_frac(l,n):
    num, num_ = 1, 0 
    den, den_ = 0, 1
    for i in l:
        num, num_ = i*num + num_, num
        den, den_ = i*den + den_, den
        n -= 1
        if n == 0 : return (num,den)
    
print(conv_inf_frac(q,10))

Answer2:

q=[2]
q.extend([m for x in [(1,2*n,1) for n in range(1,34)] for m in x])

n=1
d=q.pop()
while(q):
    t=d*q.pop()+n
    n=d
    d=t
print(sum([int(x) for x in str(t)]))


<Problem 66>

Consider quadratic Diophantine equations of the form:
x2 – Dy2 = 1
For example, when D=13, the minimal solution in x is 6492 – 13×1802 = 1.
It can be assumed that there are no solutions in positive integers when D is square.
By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:
32 – 2×22 = 1
22 – 3×12 = 1
92 – 5×42 = 1
52 – 6×22 = 1
82 – 7×32 = 1
Hence, by considering minimal solutions in x for D ≤ 7, the largest x is obtained when D=5.
Find the value of D ≤ 1000 in minimal solutions of x for which the largest value of x is obtained.

Answer:

Not so hard if you know a couple obscure facts.

Fact 1. Given two non-negative fractions A/B and C/D, the new fraction defined by (A+C)/(B+D) lies between the first two.
Clearly if you had a real number bounded below by one fraction, A/B, and above by another fraction, C/D, 
you could create this new fraction (A+B)/(B+D) which lands in the middle somewhere and depending on whether the new fraction was above or below the real number, 
you could tighten the bounds by replacing either the lower or the upper bound with this new fraction. Nothing terribly exciting in that. The exciting thing is this:
Fact 2: if you start this process off bounded below by the fraction 0/1 (which is of course just zero) and above by the fraction 1/0 (which you must just pretend is a fraction, 
it is of course actually infinity - and we will eventually replace it with a real fraction when we tighten the upper bound) - 
This process will hit all the convergents from the continued fraction for the real number.
The process first slides one bound, say the lower one up, and it does this for a while, then it slides the upper one down for a while, 
and it goes back and forth, moving one for a while then the other. 
The convergents just happen to be the values of the bounds before you switch direction and move the other bound. 
Not every bound you create is a convergent but every convergent will show up as one of these bounds.
Once you know this, and once you know that pell's equation will be solved by one of the convergents you simply run the process and look at this sequence of fractions. 
One of them will be the solution.

def pell(n):
    n1, n2 = 0, 1
    d1, d2 = 1, 0
    while 1:
        a = n1 + n2
        b = d1 + d2
        t = a*a - n*b*b
        if t == 1: return a, b
        elif t ==0 : return 1, 0
        else:
            if t>0 :n2, d2 =a, b
            else : n1, d1 =a, b

Answer2:

from sympy.solvers.diophantine import diop_DN
print(sorted([(diop_DN(d, 1)[0], d) for d in range(2, 1001)])[-1][1])


<Problem 67>

By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
3
7 4
2 4 6
8 5 9 3
That is, 3 + 7 + 4 + 9 = 23.
Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows.

Answer:

with open('p067_triangle.txt' ,'r') as file:
    l = [[int(a) for a in b.split()] for b in file.readlines()]

for i in range(len(l)-1):
    for j in range(len(l[-2])):
        l[-2][j] += max(l[-1][j], l[-1][j+1])
    l.pop()
    if len(l) == 1 : print(l[0][0])

Answer2:

from functools import reduce
triangle =[[int(a) for a in b.split()] for b in open('p067_triangle.txt').readlines()]
print(reduce(lambda x, y : [y[i] + max(x[i],x[i+1]) for i in range(len(y))], reversed(triangle) ))


<Problem 68>

Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum 16-digit string for a "magic" 5-gon ring?

Answer:

from functools import reduce

constraint = [lambda c: True] * 10
constraint[0] = lambda c: c[0] == 10
constraint[4] = lambda c: c[0] + c[1] == c[3] + c[4]
constraint[6] = lambda c: c[2] + c[3] == c[5] + c[6]
constraint[8] = lambda c: c[4] + c[5] == c[7] + c[8]
constraint[9] = lambda c: c[6] + c[7] == c[1] + c[9]

sides, rots = [0,1,2,3,2,4,5,4,6,7,6,8,9,8,1], []
for i in range(0, len(sides), 3): rots.append(sides[i:] + sides[:i])

search, sols = [[]], []
while len(search) > 0:
    c = search.pop()
    left = set(range(1, 11)) - set(c)
    if len(left) == 0: sols.append(c); print(c)
    for cv in left:
        if constraint[len(c)](c + [cv]): search.append(c + [cv])

for sol in sols:
    sol[:] = min([sol[cidx] for cidx in rot] for rot in rots)

print (reduce(lambda a, b: a + b, map(str, max(sols))))


<Problem 69>

Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of numbers less than n which are relatively prime to n. 
For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.

n	Relatively Prime	φ(n)	n/φ(n)
2	1	1	2
3	1,2	2	1.5
4	1,3	2	2
5	1,2,3,4	4	1.25
6	1,5	2	3
7	1,2,3,4,5,6	6	1.1666...
8	1,3,5,7	4	2
9	1,2,4,5,7,8	6	1.5
10	1,3,7,9	4	2.5

It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.
Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.

Answer:

2*3*5*7*11*13*17


<Problem 70>

Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of positive numbers less than or equal to n which are relatively prime to n. 
For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.
The number 1 is considered to be relatively prime to every positive number, so φ(1)=1.
Interestingly, φ(87109)=79180, and it can be seen that 87109 is a permutation of 79180.
Find the value of n, 1 < n < 107, for which φ(n) is a permutation of n and the ratio n/φ(n) produces a minimum.

Answer:

from primePy import primes
import bisect

def is_permut(a,b):
    return sorted(str(a)) == sorted(str(b))

l = primes.upto(10000)
ratio = 2

for i in range(bisect.bisect_left(l, 10**3.5), 0, -1):
    p = l[i]
    lowerbound, upperbound = 1/(1-1/(ratio*(1-1/p))), 10**7//p

    if upperbound > l[-1] : print("Error : sieve more primes")
    if lowerbound> upperbound : break

    for j in range(bisect.bisect_left(l,upperbound),0,-1):
        q = l[j]
        if q < lowerbound : break
        if is_permut(p*q, (p-1)*(q-1)) : print(p*q); ratio = p*q/((p-1)*(q-1))

Answer2:

from primePy import primes as pp
from itertools import combinations

def PE70(lim=10**7):
    primes=pp.upto(int(2*int(lim**.5)))
    bR, bN = lim, 0
    for p1, p2 in combinations(primes,2):
        if p1*p2<=lim:
            n,phi,r = p1*p2,(1-p1)*(1-p2),p1*p2/float((1-p1)*(1-p2))
            if r<bR and sorted(str(n))==sorted(str(phi)): bR,bN = r, n
    return bN

print(PE70())