Recovery Key : 1726021-UeYYO1HeftZg1fpcmkdTsRuhfsYiXA36kw0yL8A6

<Problem 1>

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

Answer1:

sum(set(range(0,1000,3))|set(range(0,1000,5)))

Answer2:

sum(list([x for x in range(1000) if x%3==0 or x%5==0]))



<Problem2>

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Answer:

a, b, sum =0, 1, 0
while(a<4000000):
    a, b = b, a+b
    if a%2 == 0 : sum += a
print(sum)


<Problem3>

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?

Answer:

n = 600851475143
i = 2
while i * i < n:
	while n % i == 0:
		n = n / i 
	i += 1
print(n)


<Problem4>

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.

Answer:

def is_Palindrome(n):
    return str(n) == str(n)[::-1]
def largest_product(x,y):
    z = 0
    for i in range(y, x, -1):
        for j in range(y, x, -1):
	if is_Palindrome(i*j):
	    if i * j > z:
	    z = i * j
	return z

print(largest_product(100,999))

Answer2:

a=max([x*y for x in range(900,1000) for y in range(900,1000) if str(x*y) == str(x*y)[::-1]])
print(a)

<Problem 5>

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

Answer:

i = 1
for k in (range(1, 21)):
    if i % k > 0:
        for j in range(1, 21):
            if (i*j) % k == 0:
                i *= j
                break
print i


<Problem6>

The sum of the squares of the first ten natural numbers is, 1^2+ 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,  (1 + 2+ ... + 10)^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is  3025 -385 = 2640 
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

Answer1:

pow(sum(range(1,101)), 2) - sum(pow(i,2) for i in range(1,101))

Answer2:

print(sum([x*y for x in range(1,101) for y in range(1,101) if x!=y]))


<Problem7>

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?

Answer1:

primes = [2,3]
i=3
while len(primes) < 10001:
    i += 2
    for p in primes:
        if i%p == 0: 
            break
        if p*p > i:
            primes.append(i)
            break
print(primes[-1])

Answer2:

count = 0
num = 2
list1 = [num]
while count<10:
    num+=1
    
    for i in list1:
        if num % i == 0:
            break
    else:
        list1.append(num)
        count +=1
print(num)

<Problem8>

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

Answer1:

from string import whitespace
from operator import mul
from functools import reduce

data = open('/tmp/data') # Number pasted to file.
nos = [int(c) for line in data for c in line if c not in whitespace]
print max([reduce(mul, nos[i:i+5]) for i in range(len(nos)-5)])

Answer2:

from functools import reduce
digits = '731671 ... 450'
max([reduce(lambda x, y: int(x) * int(y), digits[i:i+13]) for i in range(len(digits)- 12)])


Answer3 : Using eval()

a = '731671 ... 450'
print(max(eval("*".join(a[x:x+13])) for x in range(len(a)-12)))


<Problem9>

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.

Answer:

print([x*y*(1000-x-y) for x in range(1,334) for y in range(x,666-x) if x**2+y**2==(1000-x-y)**2])


<Problem10>

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.

Answer:

sum(algorithm.seive(2000000))