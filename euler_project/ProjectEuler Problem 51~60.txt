<Problem51>

By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers,
 yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.
Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.

Answer1:

from primePy import primes
from itertools import product, combinations

digit = 6
primelist = list(filter(lambda x: x>10**(digit-1), primes.upto(10**digit)))


primedic= {}
for p in primelist:
    strp = str(p)
    for num in set(strp):
        count = strp.count(str(num))
        if count>=3:
            for it in product([1,0], repeat=count):
                strp = str(p)
                i=-1
                for tf in it:
                    i= strp.index(str(num),i+1)
                    if tf: strp= strp[:i]+"*"+strp[i+1:]            
                primedic.setdefault(strp,[]).append(p)                
for value in primedic.values():
    if len(value) >= 8 : print(value)

Answer2:

from primePy import primes

def epf(num, rd):
    count = 0
    for dig in '0123456789':
        n = int(num.replace(rd, dig))
        if n > 100_000 and primes.check(n):
            count += 1
    return count == 8

def main():
    plist = primes.upto(1_000_000)
    for prime in plist:
        if prime >100_000:
            s = str(prime)
            if any([s.count('0') == 3 and epf(s, '0'), s.count('1') == 3 and epf(s, '1'), s.count('2') == 3 and epf(s, '2')]):
                return s
                
r = main()
print(f'{r}')


<Problem52>

It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.
Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.

Answer:

def PE051():
    while True:
        digit = 6 
        for i in range(10**(digit-2), 10**(digit-1)):
            if len(set(str(i))-{'1'}) >= 5 : 
                n= 10**(digit-1)+i
                if sorted(list(str(n))) ==  sorted(list(str(2*n))) == sorted(list(str(3*n)))  \
                == sorted(list(str(4*n)))== sorted(list(str(5*n)))  == sorted(list(str(6*n))):
                    return(n)
        digit+=1

print(PE051())


<Problem53>

There are exactly ten ways of selecting three from five, 12345:
123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

In combinatorics, we use the notation 5C3=10, 
It is not until n=23 , that nCr exceeds one-million: 

How many, not necessarily distinct, values of 
 for n<=100 , nCr are greater than one-million?

Answer:

count = 0
for n in range(1,101):
    nCr=1
    for r in range(1,n//2+1):
        nCr *= (n-r+1); nCr //= r
        if nCr>1_000_000: count += (n-r)-(r)+1; break
print(count)


<Problem54>

The file, poker.txt, contains one-thousand random hands dealt to two players.
Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards.
You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.
How many hands does Player 1 win?

Answer:

valuedic = {k:v for v,k in enumerate('23456789TJQKA')}
suitdic  = {k:v for v,k in enumerate('DSHC')}

def value(card):
    return 4*valuedic[card[0]] + suitdic[card[1]]

class Player:

    def __init__(self, cards):
        self.cards = sorted(cards,key = value)
        self.values = [self.cards[i][0] for i in range(5)]
        self.suits  = [self.cards[i][1] for i in range(5)]
        self.combination=[]

    def pairs(self):
        self.combination=[]
        for v in '23456789TJQKA':
            if self.values.count(v) >1:
                self.combination += [card for card in self.cards if card[0] == v]
        return self.combination
    
    def flush(self):
        self.combination=[]
        if len(set(self.suits)) == 1 :
            self.combination = self.cards
        return self.combination

    def straight(self):
        self.combination=[]
        v = "".join(self.values)
        if (len(v) == 5 and v in '23456789TJQKA'): self.combination = self.cards   
        elif v =='2345A': self.combination = [self.cards[-1]]+self.cards[:-1]
        return self.combination

    def total(self):         # 1p:100, 2p:200, 3k:300, st:400, fl:500, fullh:600, 4card:700, stfl:800
        if self.pairs() :
            pair = len(self.combination)
            if pair == 2: return 100 + value(self.combination[-1])
            elif pair ==3 : return 300 + value(self.combination[-1]) 
            elif pair ==5 : return 600 + value(self.combination[-1])
            elif len(set(self.values)) == 3 : return 200 + value(self.combination[-1])
            else : return 700 + value(self.combination[-1])
        if self.straight(): return 400 + value(self.combination[-1])
        if self.flush() :
            if self.straight(): return 800 + value(self.combination[-1])
            else: 500 + value(self.cards[-1])
        return value(self.cards[-1])

def main(txtfile):

    with open(txtfile) as file:
        allrounds = file.readlines()
    win=0    
    for round in allrounds:
        player1, player2 = Player(round.split()[:5]), Player(round.split()[5:])
        if player1.total() > player2.total() : win +=1 
    print(win)

main('poker.txt')

Answer2:

def rank(s, val_dict={c:i for i, c in enumerate('23456789TJQKA', 2)},
         pair_dict={(2,1):1, (2,2):2, (3,1):3, (3,2):6, (4,1):7},
         no_pair_dict={(0,0):0, (1,0):4, (0,1):5, (1,1):8}):
    '''
    Give a tuple showing the rank of the hand; higher is better.

    vals are the card values, sorted by importance -- a 2 has value 2, 
    A has value 14.

    counts[0] is the highest frequency; 3 if there is three of a kind, etc.
    If it's bigger than 1,  the hand won't be straight or flush.
    
    pair_dict keys for duplicates are the two highest frequencies of card
    values, so (2, 1) means one pair, (3, 2) is full house, etc.
    
    If there are no duplicate cards, algorithm is as follows:
    check for straight and flush.  If neither, assign 0; if straight, 4; if
    flush, 5, if straight/royal flush, 8.
    '''
    repeats = [(s[::3].count(c), val_dict[c], suit) for c, suit in s.split()]
    repeats.sort(reverse=True)
    counts, vals, suits = zip(*repeats)
    if counts[0] > 1: rk = pair_dict[(counts[0], counts[counts[0]])]    
    else: rk = no_pair_dict[(vals[0] - vals[-1] == 4, len(set(suits)) == 1)]
    return (rk,) + vals

with open('poker.txt', 'r') as f:
    print(sum(rank(s[:14]) > rank(s[15:]) for s in f))


Answer3:

T=(([1],[3,1.5]),([3,1.7],[5]))
def rank(H, v=dict(zip(b'23456789TJQKA', range(13)))):
  C,V,S = zip(*reversed(sorted([(H.count(c), v[c], s) for c, s in H.split()])))
  return ([C[0], C[C[0]]] if C[0]>1 else T[len(set(S))==1][V[0]-V[4]==4]), V

print(sum([rank(s[:14]) > rank(s[15:]) for s in open('p054_poker.txt', 'rb')]))


<Problem55>

If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
Not all numbers produce palindromes so quickly. For example,
349 + 943 = 1292,
1292 + 2921 = 4213
4213 + 3124 = 7337
That is, 349 took three iterations to arrive at a palindrome.
Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. 
A number that never forms a palindrome through the reverse and add process is called a Lychrel number. 
Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. 
In addition you are given that for every number below ten-thousand, it will either 
(i) become a palindrome in less than fifty iterations, or, 
(ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. 
In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).
Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.
How many Lychrel numbers are there below ten-thousand?
NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.

Answer:

def Lycheck(n):
    for i in range(0,50):
        n = n+int(str(n)[::-1])
        if str(n)==str(n)[::-1]: return False
    return True
len([n for n in range(10000) if Lycheck(n)])


<Problem56>

A googol (10^100) is a massive number: one followed by one-hundred zeros; 100100 is almost unimaginably large: one followed by two-hundred zeros.
Despite their size, the sum of the digits in each number is only 1.
Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?

Answer:

max( [ sum( [ int( i ) for i in str( a ** b ) ] ) for a in xrange( 90, 100 ) for b in xrange( 90, 100 ) ] )


<Problem57>

It is possible to show that the square root of two can be expressed as an infinite continued fraction.
 \sqrt 2 =1+ \frac 1 {2+ \frac 1 {2 +\frac 1 {2+ \dots}}}
 By expanding this for the first four iterations, we get:
 1 + 1/2 = 3/2 = 1.5 
1 + \frac 1 {2 + \frac 1 2} = \frac 7 5 = 1.4 
 1 + \frac 1 {2 + \frac 1 {2+\frac 1 2}} = \frac {17}{12} = 1.41666 \dots 
1 + \frac 1 {2 + \frac 1 {2+\frac 1 {2+\frac 1 2}}} = \frac {41}{29} = 1.41379 \dots
 The next three expansions are  \frac {99}{70},  \frac {239}{169}, and  \frac {577}{408}, but the eighth expansion, \frac {1393}{985}
, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.
In the first one-thousand expansions, how many fractions contain a numerator with more digits than the denominator?

Answer:

a, b, count = 1, 1, 0 
for n in range(1000):
    b, a = 2*a + b, a+b
    count += len(str(b)) > len(str(a))
print(count)


<Problem58>

Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.

37 36 35 34 33 32 31
38 17 16 15 14 13 30
39 18  5  4  3 12 29
40 19  6  1  2 11 28
41 20  7  8  9 10 27
42 21 22 23 24 25 26
43 44 45 46 47 48 49

It is interesting to note that the odd squares lie along the bottom right diagonal, 
but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.
If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. 
If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?

Answer:

p = 0
d, d2, d3, d4 =0, 1, 1, 1
n=0
while 1:
    n += 1
    d2 += d+6
    d3 += d+4
    d4 += d+2
    p += sum(check(i) for i in (d2,d3,d4))
    d +=8
    if 10*p < 4*n+1 : print(2*n+1); break


<Problem59>

Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). 
For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.
A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. 
The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.
For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. 
The user would keep the encrypted message and the encryption key in different locations, and without both "halves", it is impossible to decrypt the message.
Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. 
If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. 
The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.
Your task has been made easy, as the encryption key consists of three lower case characters. 
Using p059_cipher.txt (right click and 'Save Link/Target As...'), a file containing the encrypted ASCII codes, 
and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.

Answer:

import string, itertools
code = eval(open('cipher1.txt').read())

def best_match(code):
    good_chars=set(map(ord, string.ascii_letters) + [ord(" ")])
    maxscore=0
    bestletter=None
    for letter in map(ord,string.lowercase):
        score = 0
        for c in code:
            if (c ^ letter) in good_chars:
                score += 1
        if score > maxscore:
            maxscore   = score
            bestletter = letter
    return bestletter

pad = [best_match(code[::3]), best_match(code[1::3]), best_match(code[2::3])]

print sum((ch ^ p) for (ch,p) in zip(code, itertools.cycle(pad)))

Answer2:

from itertools import permutations
from time import time


def decrypt(encrypted_msg, password):
  message = ''
  for i in range(len(encrypted_msg)):
    message += chr(encrypted_msg[i] ^ password[i % 3])
  return message


if __name__ == '__main__':
  t0 = time()
  candidates = [x for x in permutations(list(range(97, 123)), 3)]
  with open('secret.txt', 'r') as f:
    raw = [int(i) for i in f.read().split(',')]
  for candidate in candidates:
    msg = decrypt(raw, candidate)
    if 'Euler' in msg:
      print(msg)
      print(f'Password: {[chr(i) for i in candidate]}')
      print(f'Solution: {sum([ord(c) for c in msg])}')
  print(f'Completed in {(time() - t0) * 1000:0.3f} ms')

Answer3:

with open("secret.txt","r") as file:
    encrypted = list(eval(file.read()))

candidates=[[],[],[]]
for j in range(3): 
        candidates[j] = sorted([( encrypted[j::3].count(i), i) for i in range(min(encrypted), max(encrypted)+1)], reverse= True)

for a in [p^ord(" ") for c, p in candidates[0][:5]]:
    for b in [p^ord(" ") for c, p in candidates[1][:5]]:
        for c in [p^ord(" ") for c, p in candidates[2][:5]]:
            cracked = "".join([chr(encrypted[i]^[a,b,c][i%3]) for i in range(len(encrypted))])
            if any(['and' in cracked, 'that' in cracked, 'with' in cracked]) : print(cracked)


Answer4:

import itertools

string_lo='abcdefghijklmnopqrstuvwxyz'

with open('secret.txt','r') as f:
    temp=f.read() 
    
cipher=[int(i) for i in temp.split(',')]

key_list=list(itertools.product(string_lo,repeat=3))

key_lenght=3

for key in key_list:
    key_asc=[ord(x) for x in key]
    key_asc_rep=key_asc*(len(cipher)//key_lenght)
    
    decrypt=[chr(x^y) for x,y in zip(cipher,key_asc_rep)]
    decrypt_text="".join(decrypt)
    if " the " in decrypt_text and " be " in decrypt_text:
        print(decrypt_text)
        print("\nThe key is: ",key)
        break
print("The ASCII sum of the original text is: ",sum([ord(i) for i in decrypt_text]))


<Problem60>

The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. 
For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.
Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.

Answer1:

l = [2]

for i in range(3, 10000, 2):
  fl = 1
  for j in l:
    if j * j > i:
      break
    if i % j == 0:
      fl = 0
      break
  if fl:
    l.append(i)

def f(a, b):
  x = int(str(a) + str(b))
  y = int(str(b) + str(a))
  for i in l:
    if i*i > max(x, y):
      return 1
    if x % i == 0 or y % i == 0:
      return 0
  return 1

for a in range(len(l)):
  A = l[a]
  for b in range(a + 1, len(l)):
    B = l[b]
    if f(A, B):
      for c in range(b + 1, len(l)):
        C = l[c]
        if f(A, C) and f(B, C):
          for d in range(c + 1, len(l)):
            D = l[d]
            if f(A, D) and f(B, D) and f(C, D):
              for e in range(d + 1, len(l)):
                E = l[e]
                if f(A, E) and f(B, E) and f(C, E) and f(D, E):
                  print(A, B, C, D, E)

Answer2:
from primePy import primes; from itertools import combinations

def makegraph(primelist):
    graph ={}; sets= []
    for p,q in combinations(primelist,2):
        if primes.check(int(str(p)+str(q))) and primes.check(int(str(q)+str(p))):
            graph.setdefault(p,[]).append(q)
            sets.append([p,q])
    return graph, sets

def nset(graph,sets,n):
    for n in range(n-2):
        newset = []
        for i in sets:
            if i[-1] in graph:
                for j in graph[i[-1]]:
                    if all([j in graph[k] for k in i[:-1]]):
                        newset.append(i+[j])
        sets = newset
    return sets

primelist1= [3]; primelist2=[3]

for p in primes.upto(10000):
    if p%3 ==1: primelist1.append(p)
    if p%3 ==2: primelist2.append(p)

graph1, set1 = makegraph(primelist1); graph2, set2 = makegraph(primelist2)
print(nset(graph1, set1, 5), nset(graph2, set2, 5))

Answer3:


import numpy as np
import networkx as nx
from networkx.algorithms.community import k_clique_communities
from time import time
from numba import jit

@jit(nopython=True)
def sieve(n):
    sieve = [True for i in range(n+1)]
    sieve[0] = False
    sieve[1] = False
    for i in range(2, n+1):
        if sieve[i]:
            for j in range(2*i, n+1, i):
                sieve[j] = False
    list_primes = [k for k in range(2, n+1) if sieve[k]]
    return sieve, list_primes

n = int(1e8)

start = time()
sieve, list_primes = sieve(n)

print("%s seconds for sieve." % (time()-start))
pool = [prime for prime in list_primes if (prime > 2 and prime < 1e4)]
pair_candidates = []

for i in range(len(pool)):
    p = pool[i]
    for j in range(i+1, len(pool)):
        q = pool[j]
        if sieve[int(str(p)+str(q))] and sieve[int(str(q)+str(p))]:
            pair_candidates.append((p,q))

graph = nx.Graph()
graph.add_edges_from(pair_candidates)
clique = list(k_clique_communities(graph, 5))
print(clique)

print("Total time: %s seconds." % (time()-start))