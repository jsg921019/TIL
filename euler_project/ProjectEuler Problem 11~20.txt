<Problem11>

In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

Answer1:

grid = [[0]*23]*3 + [[int(x) for x in line.split()]+[0,0,0] for line in
'''08 02 ... 67 48'''.split('\n')] + [[0]*23]*3

import operator

print max([reduce(operator.mul, [grid[y+n*d[0]][x+n*d[1]] for n in (0,1,2,3)])
        for x in xrange(0,20) for y in xrange(3,23)
        for d in ((0,1),(1,0),(1,1),(-1,1))])

Answer 2:

grid = ["...","...".....]
def cell(x, y):
    return int(grid[y-1][(x-1)*3:(x-1)*3+2])

def allCombinations():
    for y in range(1, 21):
        for x in range(1, 18):
            yield [cell(x, y), cell(x+1, y), cell(x+2, y), cell(x+3, y)]
    for x in range(1, 21):
        for y in range(1, 18):
            yield [cell(x, y), cell(x, y+1), cell(x, y+2), cell(x, y+3)]
    for x in range(1, 18):
        for y in range(1, 18):
            yield [cell(x, y), cell(x+1, y+1), cell(x+2, y+2), cell(x+3, y+3)]
    for x in range(4, 21):
        for y in range(1, 18):
            yield [cell(x, y), cell(x-1, y+1), cell(x-2, y+2), cell(x-3, y+3)]

def product(values):
    result = 1
    for value in values:
        result *= value
    return result

def allProducts():
    for fourNumbers in allCombinations():
        yield product(fourNumbers)

print max(allProducts())

Answer3:

mul     = lambda X  : reduce( lambda x,y: x*y, X)
ziplist = lambda X,n: zip(* [ X[i:-(n-i)] for i in range(n) ] )

# Print horzontial multiply
print max([max([mul(r) for r in ziplist(row,4)] ) for row in A])

# Print vertical multiply
print max([max([mul(r) for r in ziplist(row,4)])  for row in zip(*A)])
        
# Print diagonal (right) multiply
print max([ max([mul(n) for n in zip(row[0][:-4], row[1][1:-3], row[2][2:-2], row[3][3:-1]) ]) for row in ziplist(A,4) ])

# Print diagonal (left) multiply
print max([ max([mul(n) for n in zip(row[3][:-4], row[2][1:-3], row[1][2:-2], row[0][3:-1]) ]) for row in ziplist(A,4) ])

Answer4:

def c(m, n):
    if 0 <= m <= 19 and 0 <= n <= 19:
         return a[m][n]
    else:
        return 0


def maxc(m, n):
    return max(c(m, n)*c(m, n + 1)*c(m, n + 2)*c(m, n + 3), c(m, n)*c(m + 1, n)*c(m + 2, n)*c(m + 3, n), c(m, n)*c(m + 1, n + 1)*c(m + 2, n + 2)*c(m + 3, n + 3), c(m, n)*c(m + 1, n + 1)*c(m + 2, n + 2)*c(m + 3, n + 3),c(m, n)*c(m + 1, n - 1)*c(m + 2, n - 2)*c(m + 3, n - 3))


def allmax():
    maxp = 1
    for i in range(0, 20):
        for j in range(0, 20):
            if maxc(i, j) > maxp:
                maxp = maxc(i, j)
        return maxp

print(allmax())

Answer5:

array = []
grid = 20
length = 4

number = open("number.txt", "r")

for i in range(grid):
    array.append([int(x) for x in number.readline().split()])

product = 0

for i in range(grid-length):
    for j in range(grid-length):
        horizontal = 1
        vertical = 1
        diagonal1 = 1
        diagonal2 = 1
        for k in range(length):
            horizontal *= array[i][j+k]
            vertical *= array[i+k][j]
            diagonal1 *= array[i+k][j+k]
            diagonal2 *= array[i+length-k][j+k]
        l = max(horizontal, vertical, diagonal1, diagonal2)
        if l > product:
            product = l

print(product)

Answer6:

a='''08 02 ..
     ...
     ...67 48'''

a = a.split("\n")
for i in range(20):
    a[i] = a[i].split(" ")

maxhorizontal = max([int(a[i][j])*int(a[i][j+1])*int(a[i][j+2])*int(a[i][j+3]) for i in range(20) for j in range(17)])

maxvertical = max([int(a[i][j])*int(a[i+1][j])*int(a[i+2][j])*int(a[i+3][j]) for i in range(17) for j in range(20)])

muldiagonal1 = max([int(a[i][j])*int(a[i+1][j-1])*int(a[i+2][j-2])*int(a[i+3][j-3]) for i in range(17) for j in range(3,20)])

muldiagonal2 = max([int(a[i][j])*int(a[i+1][j+1])*int(a[i+2][j+2])*int(a[i+3][j+3]) for i in range(17) for j in range(17)])

print(max(maxhorizontal, maxvertical, muldiagonal1, muldiagonal2))

Answer7:

import numpy as np

with open('problem_11_data.txt', 'r') as f:
    data = f.read()

data = data.split('\n')[:-1]
data = np.array([[int(n) for n in row.split(' ')] for row in data])

def problem_11(data):
    # Create copies with elements shifted along rows, columns, and rows & 
    # columns
    row_shift = np.zeros((20,20,4))
    col_shift = np.zeros((20,20,4))
    all_shift_1 = np.zeros((20,20,4))
    all_shift_2 = np.zeros((20,20,4))

    row_shift[:,:,0] = data
    col_shift[:,:,0] = data
    all_shift_1[:,:,0] = data
    all_shift_2[:,:,0] = data

    
    for shift in [1, 2, 3]:
        row_shift[:, :-shift, shift] = data[:, shift:]
        col_shift[:-shift, :, shift] = data[shift:, :]
        all_shift_1[:-shift, :-shift, shift] = data[shift:, shift:]
        all_shift_2[shift:, :-shift, shift] = data[:-shift, shift:]

    return int(
        np.max(
            [
            np.max(np.prod(row_shift, 2)),
            np.max(np.prod(col_shift, 2)),
            np.max(np.prod(all_shift_1, 2)),
            np.max(np.prod(all_shift_2, 2)) 
            ]
        )
    )

Answer8:

n = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 \
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 \
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 \
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 \
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 \
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 \
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 \
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 \
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 \
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 \
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 \
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 \
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 \
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 \
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 \
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 \
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 \
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 \
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 \
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48".split()

def product(n, i, d):
    return int(n[i]) * int(n[i + d]) * int(n[i + 2 * d]) * int(n[i + 3 * d])

result = 0
for i in range(len(n)):
    if i % 20 <= 16:
        result = max(result, product(n, i, 1))
    if i % 20 <= 16 and i // 20 <= 16:
        result = max(result, product(n, i, 21))
    if i // 20 <= 16:
        result = max(result, product(n, i, 20))
    if i % 20 >= 3 and i // 20 <= 16:
        result = max(result, product(n, i, 19))

print(result)


<Problem 12>

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Answer1: n 과 n+1 을 따로 계산

def numofdivisors(num):
    divisornum = 0
    if num % 2 == 0 : num = num//2
    for i in range(1,num+1):
        if num%i == 0 : divisornum += 1
    return(divisornum)

a, b = 1, 2
divisorsa, divisorsb = 1,1
divisors =1
while divisors < 500 :
    a, b = b, b+1
    divisorsa = divisorsb
    divisorsb = numofdivisors(b)
    divisors = divisorsa*divisorsb
print((a*b)//2, divisors)

Answer2 :

n=sum=i=0
while sum<500:
    n+=1
    sum=0
    i=int(n*(n+1)/2)

    for k in range (1,int (i**0.5)+1):
        if(i%k==0) : sum+=2
print(sum,i)

Answer3 :

def factors(n):
    half_factors = [i for i in range(1, int(n**.5) + 1) if n % i == 0]
    return list(set(half_factors + [n // i for i in half_factors]))

def triangular(n):
    return n * (n + 1) // 2

n = 1
while len(factors(triangular(n))) < 500:
    n += 1
print(triangular(n))

Answer4:

def getdivs(n):
    divs = 1
    c = 0
    d = 2
    while d <= n:
        c = 0
        while n % d == 0:
            c += 1
            n //= d
        divs *= c + 1
        if d == 2:
            d = 3
        else:
            d += 2
    return divs


i = 500
divs = 0
while divs <= 500:
    i += 1
    n = i * (i + 1) // 2
    divs = getdivs(n)
print(i, n, divs)

Answer5:

def PE012(limit=500):
  dec=[dict(), dict(), {2:1}, {3:1}]
  Nbdivi=[0, 1, 2, 2]
  prime=[2,3]
  n=3
  while True:
    n += 1
    for p in prime:
      if not n%p:
        dec.append(dec[n//p].copy())
        if p in dec[n]:
          dec[n][p]+=1
        else:
          dec[n][p]=1
        nd=1
        for p,a in dec[n].items():
          nd*=(a+1)
        Nbdivi.append(nd)
        break
      if p*p>n: # n est premier
        dec.append({n:1})
        Nbdivi.append(2) # pas de changement
        prime.append(n)
        break

    if n%2:
        if Nbdivi[(n-1)//2]*Nbdivi[n]>limit: return (n-1)//2 * n
    else:
        if Nbdivi[n//2]*Nbdivi[n-1]>limit: return (n//2)*(n-1)

<Problem13>

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
...
53503534226472524250874054075591789781264330331690

Anwser :

print (str(sum(int(x) for x in open('data','r')))[:10])


<Problem 14>

The following iterative sequence is defined for the set of positive integers:
n → n/2 (n is even)
n → 3n + 1 (n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.

Answer:

def collatz(n): return n // 2 if n%2 == 0 else 3*n + 1

def distance(n, cache={1:1}):
    if n not in cache: cache[n] = distance(collatz(n)) + 1
    return cache[n]

print(max(range(1,1000000), key=distance))


<Problem 15>

Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
How many such routes are there through a 20×20 grid?

Answer1 : 40C20을 구하는 방법

matrix = []
for x in range(21):
    matrix += 1,

for x in range(1, 21):
    for y in range(0, 21):
        if y == 0:
            matrix[0] = 1
        else:
            matrix[y] = (matrix[y] + matrix[y-1] )
    

print(matrix[-1])

----

def steps():
    a=[0,1,0]
    for k in range(20):
        a= [0]+[a[i]+a[i+1] for i in range(len(a)-1)]+[0]
        a= [0]+[a[i]+a[i+1] for i in range(len(a)-1)]+[0]
        yield a

print(max([max(i) for i in steps()]))

Answer2: path 더하기를 이용

c={}
def numberofpath(a,b):
    if a == 0 or b == 0:
        c[a,b] = 1
    else:
        c[a,b] = c[a,b-1] + c[a-1,b]

for sum in range(41):
    for i in range(sum+1):
        numberofpath(sum-i,i)

print(c[20,20])


<Problem16>

2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 2^1000?

Answer1:
from functools import reduce
print(reduce(lambda x, y: int(x)+int(y), str(2**1000)))

Answer2:
print(sum(int(digit) for digit in str(2**1000)))


<Problem17>

If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.
The use of "and" when writing out numbers is in compliance with British usage.


Answer1:

s={0:"",1:"one",2:"two",3:"three",4:"four",5:"five",6:"six"/
,7:"seven",8:"eight",9:"nine",10:"ten",11:"eleven"/
,12:"twelve",13:"thirteen",14:"fourteen",15:"fifteen"/
,16:"sixteen",17:"seventeen",18:"eighteen",19:"nineteen"/
,20:"twenty",30:"thirty",40:"forty",50:"fifty"/
,60:"sixty",70:"seventy",80:"eighty",90:"ninety"}
for i in range(1,1000):
	if(not i in s.keys()):
		if(i<100):
			s[i]=s[i/10*10]+s[i%10]

		else:
			s[i]=s[i/100]+"hundred"
			if(i%100):
				s[i]+="and"+s[i%100]
s[1000]="onethousand"
total=0;
 for i in s.values():
	total+=len(i)

Answer2: num2words pip

from num2words import num2words 
ans=0
for i in range(1,1001):
    original=num2words(i) 
    
    del_punctuation=''.join(x for x in original if x not in ('-',',',' '))
    
    ans=ans+len(del_punctuation)
print(ans)

<Problem18>

By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67,
 is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)

Answer:

triangle = <<triangle list>>

for k in range(2,len(triangle)+1):
	for i in range(1,len(triangle[-k])+1):
		triangle[-k][i-1] += max(triangle[-k+1][i-1],triangle[-k+1][i])

print 'Largest sum is:',triangle[0][0]


<Problem19>

You are given the following information, but you may prefer to do some research for yourself.

1 Jan 1900 was a Monday.
Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?


Answer:

from calendar import weekday
print sum(int(weekday(y, m, 1) == 6) for y in range(1901, 2001) for m in range(1, 13))


<Problem20>

n! means n × (n − 1) × ... × 3 × 2 × 1
For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!

Answer:

from math import factorial
print(sum([int(i) for i in str(factorial(100))]))