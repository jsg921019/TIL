
파일 확장자 : .py
터미널 클리어 : cls


<문자열 연결>
print(string*2)
print( string1 + string2)
print(string + str(int/bool)) 	=> type 같아야됨
print(string,int,bool) 	=> type 달라도 됨
print(string1, end="")
print(sting2)		=> 연결되서 나옴


<주석>
한줄 :
#주석 

여러줄 :
'''
주석
'''
단축키 : ctrl/


<연산자>
제곱 : 	2**3 =>8
나머지 : 	5%3 => 2
몫 : 	5//3 => 1

boolean
>,>=,<,<=
== 같다
!= 같지않다
not 반대
not True = False
and,&
or,|
a>b>c 같은것도 가능


<수식>
num = num +2 	<=> num +=2
num = num -2 	<=> num -=2
num = num*2 	<=> num *=2
num = num/2 	<=> num /=2
num = num%2 	<=> num %=2
num = num//2 	<=> num //=2


<변수>

변수 이름					변수 값
a			=		3
메모리의 주소를 가리킴			객체가 메모리에 생성됨

id(a) = 1908778960	=> 실제 메모리 주소
a is b			=> a와 b가 가리키는 객체는 동일한가? (주소가 같은가?) <=> not is
a==b			=> 오브젝트의 값이 같은가? 

a=[1,2,3]
b=a			=> a,b 같은 객체를 가리키게 되어 a를 바꾸면 b도 같이 바뀜
b=a[:]			=> 다른 객체를 가리키게 되어 a를 바꿔도 b는 바뀌지 않음
from copy import copy
b=copy(a)		=> copy를 이용해서 같은 효과


<숫자처리함수>
절대값 : abs(-5) 			<=> 5
지수 : pow(4,2) 			<=> 4^2
최대값 : max(5, 12) 		<=> 12
최소값 : min(5,12) 			<=> 5
반올림 : round(3.14) 		<=> 3
소수점 조절1 : round(160/3,2) 	<=> 53.33
소수점 조절2 : round(150/3,-1)	<=> 50
소수점 제거 int(3.14) 		<=> 3

math library : from math import*
내림 : floor(4.99) 	<=> 4
올림 : ceil(3.14) 	<=> 4
제곱근 : sqrt(16) 	<=> 4

random library : from random import*
random() 	<=> 0<=x<1 랜덤 
randrange(1,46) 	<=> 1<=n<46 랜덤 정수
randint(1,45) 	<=> 1<=n<=45 랜덤 정수
shuffle([1,2,3])	<=> 리스트 셔플
sample([1,2,3],2)	<=> 리스트에서 2개 랜덤 선택

<문자열>
한줄	 "문장" or '문장'
여러줄	"""
	문장1
	문장2
	"""


<슬라이싱>
sentence = "123456789"
sentence[7] 	<=> "8"
sentence[1:3] 	<=> "23"
sentence[:2] 	<=> sentence[0:2]
sentence[7:] 	<=> sentence[7:9]
sentence[-3:] 	<=> "789"


<문자열 처리함수>
sentence = "Python is Amazing"
sentence.lower() 			<=> "python is amazing"
sentence.upper() 			<=> "PYTHON IS AMAZING"
sentence[0].isupper() 		<=> true
len(sentence) 			<=> 17
sentence.replace("Python", "Java",1) 	<=> "Java is Amazing" 1번 바꿈 비워놓으면 다 바꿈
index = sentence.index("n") 		<=> 5
sentence.index("n", index+1) 		<=> 15 ( index+1 번째 문자부터 다음 n 찾기)
sentence.find("n")			<=> index와 동일하지만 없으면 -1
sentence.count("n")			<=> 2 (n의 갯수)
",".join(sentence)			<=> P,y,t,h,o,n, ,i,s, ,A,m,a,z,i,n,g
sentence.split()			<=>['Python', 'is', 'Amazing']
"a,b,c,d".split(",")			<=>['a', 'b', 'c', 'd']
"   abc   ".strip()			<=>"abc" / 자매품으로 lstrip, rstrip

<문자열 포맷>
방법1
print("나는 %d살입니다." %(20))
%d 정수
%s 문자열
%c 문자
print("나는 %s색과 %s색을 좋아해요." %("파란", "빨간"))

방법2
print("나는 {}살입니다." .format(20))
print("나는 {}색과 {}색을 좋아해요." .format("파란", "빨간"))
print("나는 {1}색과 {0}색을 좋아해요." .format("파란", "빨간"))

방법3
print("나는 {age}살이며, {color}색을 좋아해요." .format(age= 20, color="빨간"))

방법4
age =20
color = "빨간"
print(f"나는 {age}살이며, {color}색을 좋아해요.")

<딕셔너리를 이용한 포매팅>
d = {'name':'홍길동', 'age':30}
f'나의 이름은 {d["name"]}입니다. 나이는 {d["age"]}입니다.'

포맷팅을 쓸때 "{", "}" 을 쓰고 싶으면 {{, }}로 써야함


<탈출문자>
\n : 줄바꿈
\" : "을 출력하고 쓰고싶을때 	ex) print("wjsms \"정승균\"입니다")
\\ : \를 출력할때 		ex) print("C:\\Users\\Python")
\r : 커서 맨앞으로 이동 		ex) print("Red Apple\rPine") <=> "PineApple"
\b : 백스페이스
\t : 탭키
\enter : 한줄로 취급

<list>
list = ["a","b","c"]

list(range(1,4))		<=> [1,2,3]
list.index("b")		<=> 1
list.append("d") 		<=> list =["a","b","c","d"]
list.insert(1,"d")		<=> list =["a","d","b","c"]
list.pop() 			<=> "c" & list =["a","b"]
list.count("a")		<=> 1
",".join(list)		<=> a,b,c
del list[1]			<=> list = ["b", "c"] (del은 모든 객체를 지울수 있음)
list.remove("c")		<=> list = ["a", "b"] (여러개 있을떄 한개만 지움)

numlist = [5,2,4,3,1]

numlist.sort() 	<=> numlist=[1,2,3,4,5]
numlist.reverse() 	<=> numlist=[1,3,4,2,5]
numlist.clear() 	<=> numlist=[]
numlist.extend(list) <=> numlist=[5,2,4,3,1,"a","b","c"]
list+numlist	<=> ['a', 'b', 'c', 5, 2, 4, 3, 1]
list*2		<=> ['a', 'b', 'c', 'a', 'b', 'c']


<dictionary>
dic = {1:"a", 2:"b", 3:"c"} 	 key:value key는 불변값이여야 함 => 리스트는 불가능
dic[3] 			<=> "c"
dic.get(3) 		<=> "c" get함수는 key가 없으면 None을 출력
dic.get(4)			<=> None 
dic.get(4, "사용가능")	<=> 4key가 없으면 "사용가능" 반환, 실제로 추가되지는 않음
3 in dic 			<=> True
4 in dic			<=> False
dic[4] = "d"		<=> dic = {1:"a", 2:"b", 3:"c", 4:"d"}
dic[3] = "d"		<=> dic = {1:"a", 2:"b", 3:"d"}
del dic[1]			<=> dic = {2:"b", 3:"d"}
print(dic.keys())		<=> key만 출력, dic_keys 클래스로 반환됨. 리스트로 하려면 list(dic.keys(())
print(dic.values())		<=> value만 출력, dic.keys() 와 dic.values() 는 for문에서도 활용가능
print(dic.items())		<=> key와 value 출력
dic.clear()			<=> dic = {}


<tuple> 내용 변경 추가 불가능 즉 하나의 객체임
tup = ("a","b","c")  => 괄호는 없어도 됨
tup[0] <=> "a"

tup = (1,)		=> 한개의 요소를 가지고 잇을땐 뒤에 코마

tuple을 이용한 변수선언
name, age, hobby = "Alex", 20, "Coding"

<set> : 집합(중복, 순서가 없음)
set1 = {1,2,3}
set2 = {3,4}
교집합 : set1 & set2
합집합 : set1 | set2
차집합 : set1 - set2
추가 : set1.add(4)
      : set1.update({4,5,6})
제거 : set1.remove(1)

<Bool>

True/False : 대문자여야됨.
bool(object)
object:
    string/list/tuple/set/dictionary	=> 비어있으면 거짓
    num			     	=> 0이면 거짓 
    None				=> 함수값이 없을때 거짓
    


<자료구조의 변경>
자료체크 print(type(data))
data = {"a", "b", "c"} 	<= set 
data = list(data) 		<= list로 변경
data = tuple(data)		<=tuple로 변경
data = set(data) 		<= set으로 변경


<if문>
if boolean :
   실행명령문
elif boolean:
   실행명령문
else:
   실행명령문

x (not )in list/tuple/string 으로도 가능

<for문> <= 반복횟수가 정해짐

for i in list/string/tuple/dictionary:
   실행명령문
for i in range(1,6):
   실행명령문
for i in dictionary:		=> key만 출력됨
    print(i)
for k,v in dictionary:
    print(k,v)		=> 이래야 두개다 출려됨

조건부 표현식
if score >= 60:
    message = "success"
else:
    message = "failure"

message = "success" if score >= 60 else "failure" 이렇게 줄여쓸수 있음
(조건문이 참인 경우) if (조건문) else (조건문이 거짓인 경우)


<while문>
while boolean:
   실행명령문
   (위로 돌아감)

무한루프시 강제종료 : ctrl c


<continue와 break>
continue 		아래에 있는 문장을 실행시키지 않고 다음 루프
break 		루프문 탈출


<한줄 for>
num = [1,2,3,4,5]
num = [i+100 for i in num]
num = [i*3 for i in num if i%2 == 0]
result=[x*y for x in range(2,10) if x>4
            for y in range(1,10) if y>4]
num = [i*j*2 if i>3&j>3 else i*j for i in num for j in num]

<함수>

함수정의
def 함수이름(변수1,변수2):
   실행문
   return 반환값		=> return 문을 만나면 함수를 빠져나감, return만 쓰면 None

기본값
def profile(name, age=17, main_lang="파이썬"): 		=> 초기화시키고 싶은 매개변수를 항상 뒤쪽에

키워드값
def profile(name, age, main_lang): 로 함수정의했을시
profile(main_lang="자바", name="유재석", age=24) 도 정상적으로 호출함

가변인자
def f(x, *args):
    .....
f(1,2,3,4) 		=> x=1, args=(2,3,4)  args는 튜플로 전달

def f(x,y,**kargs):
    ....
f(2,3, flag=True, mode='fast')	=> x=2, y=3, kwargs={'flag':True, 'mode':'fast'} 딕셔너리로 전달

def f(*args, **kwargs):
    ...
f(2, 3, flag=True, mode='fast', header='debug')
   # args = (2, 3)
   # kwargs -> { 'flag': True, 'mode': 'fast', 'header': 'debug' }	=> 혼합도 가능

numbers = (2,3,4)
f(1,*numbers)	=> f(1,2,3,4)와 같음/ list, string, set도 됨

options = {'color' : 'red', 'delimiter' : ',' ,'width' : 400}
f(data, **options) 	=>f(data, color='red', delimiter=',', width=400)와 같음

def profile(name, age, *language):
   print(f"{name} {age}",end=" ")
   for lang in language:
      print(lang, end=" ")
   print()

지역변수
함수내에서의 매개변수 => 임시변수임

전역변수 사용
global 변수이름	=> 왠만하면 피하자

<lambda> 임시 함수를 만들고 싶을떄, 간략하게 함수 정의, 한줄이고 return 필요 없음, 이름도 없음
lambda 인자 : 표현식

def hap(x, y):
    return x + y
hap(10, 20)

이 함수를 람다로 하면
(lambda x,y: x + y)(10, 20)	=>(lambda x,y: x+y) 이거 자체가 그냥 함수 이름임

이름을 붙여주고싶으면 
add = lambda a, b: a+b
add(10,20)

활용 예 1) filter(), map(), reduce() : 함수의 매개변수로 함수가 있을때
map(함수,리스트) 라는 함수가있는데 이때 람다쓰면 편리함
list((map(lambda x: x ** 2, range(5)))) => [0:5] 에 대해서 y=x^2을 매핑한거

활용 예 2) 함수를 반환값으로 하고 싶을때
def inc(n):
    return lambda x: x + n


<입력함수>
입력값 받기 : inp = input("인풋을 입력하십시요")	=> 입력값은 모두 string으로 취급

<표준입출력>
print("a", "b", sep=" vs ", end="?") => a vs b?

import sys
print("a", "b", file=sys.stdout)		=> 표준출력
print("a", "b", file=sys.stderr)		=> 표준에러

print(string.ljust(8))		=> 왼쪽정렬 8칸
print(string.rjust(4))		=> 오른쪽정렬 4칸
print(string.zfill(3))		=> 크기3, 빈공간은 0

<다양한 출력 포맷>

print("{0:_>10}".format(500)) 		=> 빈자리는 "_", 오른쪽 정령, 크기 10 , ^는 가운데 정렬
print("{0:+}".format(500))		=> 양수이면 +표시
print("{0:,}".format(10000000))	=> 3자리마다 , 표기
print("{0:f,}".format(5/3))		=> 소수점 표기, 
print("{0:.2f,}".format(5/3))		=> 소수점 2자리수까지 표기, 
print("{0:_>+20,.2f}".format(100000/3))	=> 혼합


<파일 입력> => string type으로 데이터 저장

score_file=open("score.txt", "w", encoding="utf8")		=>"w"는 write, encoding은 한글깨짐 방지
							=>"score.txt" 대신"C:/doit/score.txt" 처럼 디렉토리 지정 가능
print("수학 : 0", file=score_file)				=> score_file.write("영어 : 50") 도 가능
print("영어 : 50", file=score_file)
score_file.close()						=> 열었으면 꼭 닫아야됨

score_file=open("score.txt", "a", encoding="utf8")		=>"a"는 append, "w"면 덮어쓰기
score_file.write("과학 : 80")
score_file.write("\n코딩 : 100")				=>write는 줄바꿈이 따로 없음
score_file.close()

<파일 출력>
방법 1 : 전체 출력
score_file=open("score.txt", "r", encoding="utf8")		=>"r"는 read
print(score_file.read())					=> score_file.read()는 string type
score_file.close()

방법2 : 한줄씩 출력
score_file=open("score.txt", "r", encoding="utf8")		
print(score_file.readline())					=> readline(3) 은 3글자만 가져옴
print(score_file.readline())
print(score_file.readline())
print(score_file.readline())					=> 한줄읽고 커서는 다음 줄로 이동
score_file.close()

방법3 : while문 활용
score_file=open("score.txt", "r", encoding="utf8")
while True;						=> 무한루프, break써야됨
   line = score_file.readline()
   if not line:						=> line이 None이면 false
       break
   print(line)
score_file.close()

방법4 : for문 활용
score_file=open("score.txt", "r", encoding="utf8")
lines = score_file.readlines()					=> list type
for line in lines:
   print(line)
score_file.close()


<pickle> => 문자열이 아닌 객체도 저장 가능
import pickle
profile_file = open("profile.pickle", "wb")				=> wb는 write binary
profile = {"이름" : "박명수", "나이" : 30, "취미" : ["축구", "골프", "코딩"]}
pickle.dump(profile, profile_file)					=> profile에 있는 정보를 file에 저장
profile_file.close()

profile_file = open("profile.pickle", "rb")				=> rb : read binary
profile = pickle.load(profile_file)					=> file에 있는 정보를 profile에 불러오기, 한줄만
print(profile)
profile_file.close()

<with> => open과 close를 한번에
import pickle
with open("profile.pickle","rb") as profile_file:
   print(pickle.load(profile_file))

with open("text.txt", "w", encoding="utf8") as text_file:
   text_file.write("글")

with open("text.txt", "r", encoding="utf8") as text_file:
   print(text_file.read())


<Class1>

클래스 생성

class FourCal:
    pass

인스턴스 생성
a = Fourcal()

메소드 => self가 들어가야됨

class Fourcal:
    def __init__(self, first, second):		=> 생성자: 객체가 생성될때 자동으로 호출, 초기값을 설정할때
        self.first     = first			=> 객체변수 설정
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def div(self):
        result = self.first/self.second
        return result

a =Fourcal(4,2)				=> init 함수에 의해 a.first = 4, a.second= 2
a.add()					=> Fourcal.add.(a) 와 같음

상속

class MoreFourCal(Fourcal):			=> Fourcal의 메소드들을 상속받음
    def mul(self):
        result = self.first * self.second
        return result

오바라이딩

class SafeFourCal(Fourcal):
    def div(self):				=> FourCal의 div를 덮어씀
        if self.second == 0 : return 0
        else : return self.first / self.second

클래스 변수 : 모든 객체에 공유됨
class Family:
    lastname = "김" 			=> Family.lastname = a.lastname = b.lastname = "김"


<Class2>

클래스 생성
class Unit:
   def __init__(self, name, hp,):				=> init 은 객체가 만들어질떄 호출/ self는 객체를 가리킴
   self.name = name					=> 멤버변수
   self.hp = hp

인스턴스 생성
marine1= Unit("마린", 40, 5)
marine2= Unit("마린", 40, 5)
tank1   = Unit("탱크", 150, 35)


<멤버 변수>
 
wraith1 = Unit("레이스", 80, 5)
wraith1.clocking = True		=> 추가로 변수 생성 가능


<method> class 안의 함수: self로 시작

class AttackUnit(Unit):					=> Unit을 상속받음, Unit에 있는 메소드를 사용가능
    def __init__(self, name, hp, damage):	
        Unit.__init__(self, name, hp)				=> Unit의 init을 가져다 씀
        self.damage = damage
    def attack(self, location):
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]" .format(self.name, location, self.damage))
    def damaged(self, damage):
        print("{0} : {1} 데미지를 입었습니다." .format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))
        if self.hp <= 0:
            print("{0} : 파괴되었습니다." .format(self.name))

firebat1 = AttackUnit("파이어뱃", 50, 16)
firebat1.attack("5시")					=> AttackUnit.attack(firebat1,"시")
firebat1.damaged(25)


<다중 상속>

class Flyable:					=> 날수있는 기능
    def __init__(self, flying_speed):
        self.flying_speed = flying_speed
    def fly(self, name, location):
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]". format(name, location, self.flying_speed))

class FlyableAttackUnit(AttackUnit, Flyable):		=> 두 class에서 상속받음
    def __init__(self, name, hp, damage, flying_speed):
        AttackUnit.__init__(self, name, hp, flying_speed)
        Flyable.__init__(self, flying_speed)

valkyrie = FlyableAttackUnit("발키리", 200, 6, 5)
valkyrie.fly(valkyrie.name, "3시")


<연산자 오버로딩> 자식 클래스에서 정의한 메소드를 쓰고싶을떄

class Unit:
    def __init__(self, name, hp, speed):
        self.name = name
        self.hp = hp
        self.speed = speed
        print("{0} 유닛이 생성 되었습니다." .format(self.name))
    def move(self, location):
        print("[지상 유닛 이동]")
        print("{0} : {1} 방향으로 이동합니다. [속도 {2}]" .format(self.name, location, self.speed))

class AttackUnit(Unit):				
    def __init__(self, name, hp, speed, damage):	
        Unit.__init__(self, name, hp, speed)
        self.damage = damage
    def attack(self, location):
        print("{0} : {1} 방향으로 적군을 공격합니다. [공격력 {2}]" .format(self.name, location, self.damage))
    def damaged(self, damage):
        print("{0} : {1} 데미지를 입었습니다." .format(self.name, damage))
        self.hp -= damage
        print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))
        if self.hp <= 0:
            print("{0} : 파괴되었습니다." .format(self.name))

class Flyable:
    def __init__(self, flying_speed):
        self.flying_speed = flying_speed
    def fly(self, location):
        print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]". format(self.name, location, self.flying_speed))

class FlyableAttackUnit(AttackUnit, Flyable):
    def __init__(self, name, hp, damage, flying_speed):
        AttackUnit.__init__(self, name, hp, 0, flying_speed)				=> 지상 speed =0 
        Flyable.__init__(self, flying_speed)

--- Unit에 speed를 넣어 수정----

vulture = AttackUnit("벌쳐", 80, 10, 20)
battlecruiser = FlyableAttackUnit("배틀", 500, 25, 3)

vulture.move("11시")
battlecruiser.fly("9시")					=> move와 fly를 합치고 싶음


class FlyableAttackUnit(AttackUnit, Flyable):			=> 공중공격유닛 class에 새로운 method move 생성
    def __init__(self, name, hp, damage, flying_speed):
        AttackUnit.__init__(self, name, hp, 0, flying_speed)
        Flyable.__init__(self, flying_speed)
    def move(self, location):					=> 부모클래스 AttackUnit의 move 메소드를 덮어씀
        print("[공중 유닛 이동]")
        self.fly(location)


<pass> : 아무것도 안하고 싶은데 뭔가 써야될때, 나중에 채워넣고 일단 테스트할때

class BuilingUnit(Unit)
    def __init__(self, name, hp, location):
        pass

supply_depot = BuilingUnit("서플", 500, "7시")


<super>

class BuilingUnit(Unit)
    def __init__(self, name, hp, location):
        Unit.__init__(self, name, hp, 0)		<=> super().__init__(name, hp, 0)   <= self 없음
        self.location = location

다중상속시:
class Unit():
    def __init__(self):
        print("Unit 생성자")

class Flyable():
    def __init__(self):
        print("Flyable 생성자")

class FlyableUnit(Unit, Flyable):
    def __init__(self):
        super().__init__()

dropship = FlyableUnit() => Unit(맨처음)의 init만 호출됨


<is instance> : 객체가 특정 클래스인지 확인

if isinstance(unit, Marine):
        unit.stimpack()


<예외처리>

print("나누기 전용 계산기입니다")
num1 = int(input("첫 번째 숫자를 입력하세요 : "))
num2 = int(input("두 번째 숫자를 입력하세요 : "))
print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))  	=> input에 문자나 0을 넣으면 에러가 뜸

try:
    print("나누기 전용 계산기입니다")
    num1 = int(input("첫 번째 숫자를 입력하세요 : "))
    num2 = int(input("두 번째 숫자를 입력하세요 : "))
    print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
except ValueError:						=> try 중 이 오류가 발생되면 실행
    print("에러가 발생되었어요")
except ZeroDivisionError as err:				=> 오류메세지 변수를 err 로 저장
    print(err)
except:							=> 나머지 오류시
    print("알 수 없는 에러가 발생하였습니다.")


except Exception as err:					=> Exception 은 모든 오류 포함하는 클래스


except (ZeroDivisionError, IndexError) as e:			=> 여러개도 가능!

<에러 발생시키기>

try:
    print("한 자리 숫자 나누기 계산기")
    num1 = int(input("첫 번째 숫자 : "))
    num2 = int(input("두 번째 숫자 : "))
    if num1 >= 10 or num2 >= 10:
        raise ValueError					=> ValueError  발생시킴
    print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
except ValueError:
    print("한 자리 숫자만 입력하세요")


<사용자 정의 예외처리>

class BigNumber(Exception):					=> 오류의 한종류를 만드므로 Exception에서 상속
    pass
try:
    print("한 자리 숫자 나누기 계산기")
    num1 = int(input("첫 번째 숫자 : "))
    num2 = int(input("두 번째 숫자 : "))
    if num1 >= 10 or num2 >= 10:
        raise BigNumber
    print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
except BigNumber:
    print("한 자리 숫자만 입력하세요")


class BigNumber(Exception):
    def __init__(self, msg):
        self.msg = msg
    def __str__(self):						=> 객체를 문자화하는 특별함수
        return self.msg
try:
    print("한 자리 숫자 나누기 계산기")
    num1 = int(input("첫 번째 숫자 : "))
    num2 = int(input("두 번째 숫자 : "))
    if num1 >= 10 or num2 >= 10:
        raise BigNumber("입력값 : {0}, {1}".format(num1, num2))
    print("{0} / {1} = {2}".format(num1, num2, int(num1/num2)))
except BigNumber as err:
    print("한 자리 숫자만 입력하세요")
    print(err)						=> err 객체를 문자열로 print
finally:							=> 에러가 나든 안나든 실행
    "계산기를 이용이 끝났습니다"


<모듈> 함수나 클래스를 정의한 py파일

	theater_module.py
----------------------------------------------------------------------
def price(people):
   print("{0}명 가격은 {1}원 입니다." .format(people, people *10000))
def price_morning(people):
   print("{0}명 가격은 {1}원 입니다." .format(people, people *6000))
def price_soldier(people):
   print("{0}명 가격은 {1}원 입니다." .format(people, people *4000))
-----------------------------------------------------------------------

<방법 1>
import theater_module					=> 모듈 import/ import는 모듈이나 패키지만 가능
theater_module.price(3)					     함수나 클래스는 import 불가
                                                                                         모듈을 import하면 한번 실행됨

<방법 2>
import theater_module as mv				=> 별명 설정
mv.price(3)

<방법 3>
from theater_module import*				=> 모듈안의 모든 함수를 import
price(3)

<방법 4>
from theater_module price, price_morning			=> 특정 함수만 import
price(5)

<방법 5>

from theater_module import price as pc, price_morning as pc2	=> 특정 함수를 별명을 설정해 import
pc(3)


<패키지> 묘듈들의 집합 

travel 폴더
---------------------------------
__init__.py						
__all__ = ["vietnam"]					=> import*의 공개설정
---------------------------------
tailand.py
class ThailandPackage:
    def detail(self):
        print("[태국] 1박 2일 5만원")
---------------------------------
vietnam.py
class VietnamPackage:
    def detail(self):
        print("[베트남] 1박 2일 4만원")
---------------------------------

<방법 1>
import travel.thailand					=> travel 패키지의 thailand 모듈 import
trip_to = travel.thailand.ThailandPackage()
trip_to.detail()

<방법2>
from travel.thailand import ThailandPackage			=> from 은 import 와 달리 함수나 클래스도 import가능
trip_to = ThailandPackage()
trip_to.detail()

<방법3>
from travel import*					=> __init__.py에서 정의한 것들만 
trip_to = vietnam.VietnamPackage()
trip_to.detail()


<모듈 직접실행>

tailand.py
class ThailandPackage:
    def detail(self):
        print("[태국] 1박 2일 5만원")
if __name__ == "__main__":					=> __name__ 모듈 이름/__main__은 프로그램의 시작점
    print("Thailand 모듈 직접 실행")
    trip_to = ThailandPackage()
    trip_to.detail()
else:
    print("Thailanad 외부에서 모듈 호출")


<패키지, 모듈 위치>

import inspect
import random
print(inspect.getfile(random))				=> 랜덤모듈이 어디있는지 알려줌


<pip install>

https://pypi.org/ 에서
터미널에 pip install qwer123 복사 붙여넣기
pip list							=> 패키지 뭐있는지 보기
pip show qwe123						=> 패키지 정보 보기
pip install --upgrade qwer123				=> 패키지 업그레이드
pip unistall qwe123					=> 패키지 언인스톨


<내장 함수>
input()
print()
dir()		=> 어떤 객체를 넘겨줬을때 그 객체가 어떤 변수와 함수를 가지고 있는지 표시
dir(random)	=> 랜덤 모듈안에서 쓸 수 있는 것들
list =[1,2,3]
dir(list)		=> 리스트에서 쓸 수 있는 것들

https://docs.python.org/3/library/functions.html => 파이써에서 쓸수 있는 내장 함수


<외장함수>
https://docs.python.org/3/py-modindex.html     => 파이썬에서 쓸수 있는 모듈들

import glob				=> 경로 내의 폴더 / 파일 목록 조회 (윈도우 dir)
print(glob.glob("*.py"))			=> 확장자가 py인 모든 파일

import os				=> 운영체제에서 제공하는 기본 기능
print(os.getcwd())				=> 현재 디랙토리

folder = "sample_dir"
if os.path.exists(folder):
    print("이미 존재하는 폴더입니다.")
else:
    os.makedirs(folder)			=> 폴더생성
    print("folder, "폴더를 생성하였습니다.")


---
새로배운것
functool.reduce
operator.mul
bytearray
yield
numpy



